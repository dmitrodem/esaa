//
// +-------------------------------------------------------------------------+
// |   This file has been generated by The Interactive Disassembler (IDA)    |
// |        Copyright (c) 2009 by Hex-Rays, <support@hex-rays.com>           |
// |                      License info: FE-0E2B-0DAA-66                      |
// |                              Licensed User                              |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  // set 'loading idc file' mode
  SetCharPrm(INF_GENFLAGS, INFFL_LOADIDC|GetCharPrm(INF_GENFLAGS));
  GenInfo();            // various settings
  Segments();           // segmentation
  Enums();              // enumerations
  Structures();         // structure types
  Patches();            // manual patches
  SegRegs();            // segment register values
  Bytes();              // individual bytes (code,data)
  Functions();          // function definitions
  // clear 'loading idc file' mode
  SetCharPrm(INF_GENFLAGS, ~INFFL_LOADIDC&GetCharPrm(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        DeleteAll();    // purge database
	SetPrcsr("st10");
	StringStp(0xA);
	Tabs(1);
	Comments(0);
	Voids(0);
	XrefShow(2);
	AutoShow(1);
	Indent(16);
	CmtIndent(40);
	TailDepth(0x10);
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	SetSelector(0X1,0X0);
	;
	SegCreate(0X0,0X10000,0X0,0,2,2);
	SegRename(0X0,"ROM");
	SegClass (0X0,"CODE");
	SegDefReg(0x0,"dpp0",0x0);
	SegDefReg(0x0,"dpp1",0x1);
	SegDefReg(0x0,"dpp2",0x2);
	SegDefReg(0x0,"dpp3",0x3);
	SetSegmentType(0X0,2);
	SegCreate(0X10000,0X20000,0X1000,0,2,2);
	SegRename(0X10000,"seg001");
	SegClass (0X10000,"CODE");
	SegDefReg(0x10000,"dpp0",0x0);
	SegDefReg(0x10000,"dpp1",0x1);
	SegDefReg(0x10000,"dpp2",0x2);
	SegDefReg(0x10000,"dpp3",0x3);
	SetSegmentType(0X10000,2);
	SegCreate(0X20000,0X30000,0X2000,0,2,2);
	SegRename(0X20000,"seg002");
	SegClass (0X20000,"CODE");
	SegDefReg(0x20000,"dpp0",0x0);
	SegDefReg(0x20000,"dpp1",0x1);
	SegDefReg(0x20000,"dpp2",0x2);
	SegDefReg(0x20000,"dpp3",0x3);
	SetSegmentType(0X20000,2);
	SegCreate(0X30000,0X40000,0X3000,0,2,2);
	SegRename(0X30000,"seg003");
	SegClass (0X30000,"CODE");
	SegDefReg(0x30000,"dpp0",0x0);
	SegDefReg(0x30000,"dpp1",0x1);
	SegDefReg(0x30000,"dpp2",0x2);
	SegDefReg(0x30000,"dpp3",0x3);
	SetSegmentType(0X30000,2);
	SegCreate(0X40000,0X50000,0X4000,0,2,2);
	SegRename(0X40000,"seg004");
	SegClass (0X40000,"CODE");
	SegDefReg(0x40000,"dpp0",0x0);
	SegDefReg(0x40000,"dpp1",0x1);
	SegDefReg(0x40000,"dpp2",0x2);
	SegDefReg(0x40000,"dpp3",0x3);
	SetSegmentType(0X40000,2);
	SegCreate(0X50000,0X60000,0X5000,0,2,2);
	SegRename(0X50000,"seg005");
	SegClass (0X50000,"CODE");
	SegDefReg(0x50000,"dpp0",0x0);
	SegDefReg(0x50000,"dpp1",0x1);
	SegDefReg(0x50000,"dpp2",0x2);
	SegDefReg(0x50000,"dpp3",0x3);
	SetSegmentType(0X50000,2);
	SegCreate(0X60000,0X70000,0X6000,0,2,2);
	SegRename(0X60000,"seg006");
	SegClass (0X60000,"CODE");
	SegDefReg(0x60000,"dpp0",0x0);
	SegDefReg(0x60000,"dpp1",0x1);
	SegDefReg(0x60000,"dpp2",0x2);
	SegDefReg(0x60000,"dpp3",0x3);
	SetSegmentType(0X60000,2);
	SegCreate(0X70000,0X80000,0X7000,0,2,2);
	SegRename(0X70000,"seg007");
	SegClass (0X70000,"CODE");
	SegDefReg(0x70000,"dpp0",0x0);
	SegDefReg(0x70000,"dpp1",0x1);
	SegDefReg(0x70000,"dpp2",0x2);
	SegDefReg(0x70000,"dpp3",0x3);
	SetSegmentType(0X70000,2);
	SegCreate(0X80000,0X90000,0X8000,0,2,2);
	SegRename(0X80000,"seg008");
	SegClass (0X80000,"CODE");
	SegDefReg(0x80000,"dpp0",0x0);
	SegDefReg(0x80000,"dpp1",0x1);
	SegDefReg(0x80000,"dpp2",0x2);
	SegDefReg(0x80000,"dpp3",0x3);
	SetSegmentType(0X80000,2);
	SegCreate(0X90000,0XA0000,0X9000,0,2,2);
	SegRename(0X90000,"seg009");
	SegClass (0X90000,"CODE");
	SegDefReg(0x90000,"dpp0",0x0);
	SegDefReg(0x90000,"dpp1",0x1);
	SegDefReg(0x90000,"dpp2",0x2);
	SegDefReg(0x90000,"dpp3",0x3);
	SetSegmentType(0X90000,2);
	SegCreate(0XA0000,0XB0000,0XA000,0,2,2);
	SegRename(0XA0000,"seg010");
	SegClass (0XA0000,"CODE");
	SegDefReg(0xA0000,"dpp0",0x0);
	SegDefReg(0xA0000,"dpp1",0x1);
	SegDefReg(0xA0000,"dpp2",0x2);
	SegDefReg(0xA0000,"dpp3",0x3);
	SetSegmentType(0XA0000,2);
	SegCreate(0XB0000,0XC0000,0XB000,0,2,2);
	SegRename(0XB0000,"seg011");
	SegClass (0XB0000,"CODE");
	SegDefReg(0xB0000,"dpp0",0x0);
	SegDefReg(0xB0000,"dpp1",0x1);
	SegDefReg(0xB0000,"dpp2",0x2);
	SegDefReg(0xB0000,"dpp3",0x3);
	SetSegmentType(0XB0000,2);
	SegCreate(0XC0000,0XD0000,0XC000,0,2,2);
	SegRename(0XC0000,"seg012");
	SegClass (0XC0000,"CODE");
	SegDefReg(0xC0000,"dpp0",0x0);
	SegDefReg(0xC0000,"dpp1",0x1);
	SegDefReg(0xC0000,"dpp2",0x2);
	SegDefReg(0xC0000,"dpp3",0x3);
	SetSegmentType(0XC0000,2);
	LowVoids(0x0);
	HighVoids(0xD0000);
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	ExtLinA		(0X0,	0,	"; File Name   : C:\\esaa\\b174dt07\\b174dt07.bin");
	ExtLinA		(0X0,	1,	"; Format      : Binary file");
	ExtLinA		(0X0,	2,	"; Base Address: 0000h Range: 0000h - D0000h Loaded length: D0000h");
	MakeCode	(0X0);
	MakeName	(0X0,	"RESET");
	MakeCode	(0X4);
	MakeCode	(0X8);
	MakeCode	(0XC);
	MakeCode	(0X10);
	MakeCode	(0X80);
	MakeCode	(0X84);
	MakeCode	(0XA0);
	MakeCode	(0X200);
	MakeComm	(0X218,	"Internal memory enable\n0: Internal memory disabled: Accesses to the IFlash Memory area use the\nexternal bus.\n1: Internal memory enabled.");
	MakeRptCmt	(0X21C,	"XBUS peripheral enable bit\n   1: The on-chip X-peripherals are enabled.\nBidirectional reset enable\n   1: RSTIN pin is a bidirectional pin. This pin is pulled low during internal reset\nsequence.\nDisable/enable control for pin BHE (set according to data bus width)\n   1: Pin BHE disabled, pin may be used for general purpose I/O.\nSTKSZ\n   1024 words");
	MakeComm	(0X222,	"Internal memory disable");
	MakeCode	(0X222);
	MakeRptCmt	(0X226,	"External bus enabled (within the respective address window, see ADDRSEL).");
	MakeComm	(0X26C,	"Watchdog Timer reset");
	MakeComm	(0X276,	"Software reset");
	MakeCode	(0X276);
	MakeComm	(0X280,	"Short Hardware reset");
	MakeCode	(0X280);
	MakeComm	(0X284,	"Long Hardware reset");
	MakeComm	(0X288,	"Power-on reset");
	MakeCode	(x=0X294);
	OpDecimal	(x,	0);
	MakeCode	(x=0X296);
	OpHex		(x,	1);
	MakeCode	(x=0X2AE);
	OpDecimal	(x,	0);
	MakeCode	(x=0X2C0);
	OpDecimal	(x,	0);
	MakeCode	(0X2DE);
	MakeCode	(0X308);
	MakeCode	(0X332);
	MakeCode	(0X372);
	MakeCode	(x=0X388);
	OpDecimal	(x,	1);
	MakeCode	(x=0X38A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X38C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X398);
	OpHex		(x,	1);
	MakeCode	(x=0X3A2);
	OpHex		(x,	1);
	MakeCode	(0X3B8);
	MakeCode	(x=0X3C2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3C4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3C6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3D2);
	OpHex		(x,	1);
	MakeCode	(x=0X3DC);
	OpHex		(x,	1);
	MakeCode	(0X3F2);
	MakeCode	(0X410);
	MakeCode	(x=0X426);
	OpDecimal	(x,	1);
	MakeCode	(x=0X42E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X442);
	OpDecimal	(x,	1);
	MakeCode	(x=0X44A);
	OpDecimal	(x,	1);
	MakeCode	(0X466);
	MakeCode	(0X474);
	MakeCode	(x=0X49E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4AC);
	OpDecimal	(x,	1);
	MakeCode	(0X4BE);
	MakeCode	(x=0X4C4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4D2);
	OpDecimal	(x,	1);
	MakeCode	(0X4E4);
	MakeCode	(0X4F8);
	MakeCode	(0X4FE);
	MakeCode	(0X510);
	MakeCode	(0X522);
	MakeCode	(0X528);
	MakeCode	(0X52E);
	MakeCode	(0X542);
	MakeCode	(0X56E);
	MakeCode	(0X59A);
	MakeCode	(0X59E);
	MakeCode	(0X5AA);
	MakeCode	(0X5D4);
	MakeName	(0X5D4,	"SOFTRESET_FUNC");
	MakeCode	(x=0X5DC);
	OpDecimal	(x,	0);
	MakeCode	(x=0X656);
	OpDecimal	(x,	0);
	MakeCode	(x=0X678);
	OpDecimal	(x,	0);
	MakeCode	(x=0X680);
	OpDecimal	(x,	0);
	MakeCode	(x=0X68E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X6AC);
	OpDecimal	(x,	1);
	MakeComm	(0X6D6,	"Software Reset");
	MakeCode	(0X6E2);
	MakeName	(0X6E2,	"j_SOFTRESET_FUNC");
	MakeCode	(0X6E8);
	MakeCode	(0X6F0);
	MakeCode	(0X6FE);
	MakeCode	(0X754);
	MakeCode	(0X76A);
	MakeCode	(0X77A);
	MakeCode	(x=0X7CA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7F8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X80A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X80C);
	OpDecimal	(x,	1);
	MakeCode	(0X938);
	MakeCode	(x=0X948);
	OpHex		(x,	1);
	MakeCode	(x=0X95C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X95E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X960);
	OpDecimal	(x,	1);
	MakeCode	(x=0X964);
	OpDecimal	(x,	1);
	MakeCode	(0X9E6);
	MakeCode	(0X9FA);
	MakeCode	(0XA02);
	MakeCode	(0XA14);
	MakeCode	(0XA1C);
	MakeCode	(0XA2E);
	MakeCode	(0XA36);
	MakeCode	(0XA48);
	MakeCode	(0XA50);
	MakeCode	(0XA62);
	MakeCode	(0XA6E);
	MakeCode	(0XAD0);
	MakeCode	(0XAD8);
	MakeCode	(0XAEA);
	MakeCode	(0XAF2);
	MakeCode	(0XB04);
	MakeCode	(0XB10);
	MakeCode	(0XB84);
	MakeCode	(x=0XB8E);
	OpDecimal	(x,	0);
	MakeCode	(0XBBA);
	MakeCode	(0XBCE);
	MakeCode	(0XBF6);
	MakeCode	(x=0XC0A);
	OpDecimal	(x,	0);
	MakeCode	(x=0XC0C);
	OpHex		(x,	1);
	MakeCode	(0XC72);
	MakeCode	(0XC76);
	MakeCode	(0XC84);
	MakeCode	(0XC98);
	MakeCode	(0XCA2);
	MakeWord	(0X293C);
	MakeWord	(0X2966);
	MakeWord	(0X2968);
	MakeWord	(0X296A);
	MakeWord	(0X296C);
	MakeWord	(0X2976);
	MakeWord	(0X2978);
	MakeWord	(0X297A);
	MakeWord	(0X297C);
	MakeWord	(0XA800);
	MakeWord	(0XA804);
	MakeByte	(0XAC9E);
	MakeByte	(0XAC9F);
	MakeWord	(0XE124);
	MakeWord	(0XE12A);
	MakeWord	(0XE12C);
	MakeWord	(0XE14C);
	MakeWord	(0XE158);
	MakeWord	(0XE15A);
	MakeWord	(0XE15C);
	MakeWord	(0XE15E);
	MakeWord	(0XE160);
	MakeWord	(0XE162);
	MakeWord	(0XE164);
	MakeWord	(0XE166);
	MakeWord	(0XE168);
	MakeWord	(0XE16A);
	MakeWord	(0XE16C);
	MakeWord	(0XE16E);
	MakeWord	(0XE170);
	MakeWord	(0XE172);
	MakeWord	(0XE174);
	MakeWord	(0XE178);
	MakeWord	(0XE17A);
	MakeWord	(0XE17C);
	MakeWord	(0XE17E);
	MakeWord	(0XE180);
	MakeWord	(0XE182);
	MakeWord	(0XE184);
	MakeWord	(0XE186);
	MakeWord	(0XE188);
	MakeWord	(0XE18A);
	MakeByte	(0XE194);
	MakeWord	(0XE1AA);
	MakeWord	(0XE1B4);
	MakeByte	(0XE1C6);
	MakeByte	(0XE1C8);
	MakeWord	(0XE1CA);
	MakeWord	(0XE294);
	MakeWord	(0XE296);
	MakeWord	(0XE298);
	MakeWord	(0XE29A);
	MakeWord	(0XE29C);
	MakeWord	(0XE29E);
	MakeWord	(0XE2A0);
	MakeWord	(0XE2A2);
	MakeWord	(0XE2A4);
	MakeWord	(0XE2A6);
	MakeComm	(0XE800,	"XASC Control Register");
	MakeWord	(0XE800);
	MakeName	(0XE800,	"XSSCON");
	MakeComm	(0XE80A,	"XASC Baud Rate Register");
	MakeWord	(0XE80A);
	MakeName	(0XE80A,	"XSXCBR");
	MakeWord	(0XE880);
	MakeComm	(0XE900,	"XASC Control Register");
	MakeWord	(0XE900);
	MakeName	(0XE900,	"XS1CON");
	MakeComm	(0XE902,	"XASC Set Control Register (write only)");
	MakeWord	(0XE902);
	MakeName	(0XE902,	"XS1CONSET");
	MakeComm	(0XE904,	"XASC Clear Control Register (wirte only)");
	MakeWord	(0XE904);
	MakeName	(0XE904,	"XS1CONCLR");
	MakeComm	(0XE906,	"XASC Baud Rate Generator Reload Register");
	MakeWord	(0XE906);
	MakeName	(0XE906,	"XS1BG");
	MakeComm	(0XE908,	"XASC Transmit Buffer Register (write only)");
	MakeWord	(0XE908);
	MakeName	(0XE908,	"XS1TBUF");
	MakeComm	(0XE90A,	"XASC Receive Buffer Registe");
	MakeWord	(0XE90A);
	MakeName	(0XE90A,	"XS1RBUF");
	MakeComm	(0XE980,	"XASC Port Control Register");
	MakeWord	(0XE980);
	MakeName	(0XE980,	"XS1PORT");
	MakeComm	(0XEA00,	"I2C Control Register");
	MakeWord	(0XEA00);
	MakeName	(0XEA00,	"CR");
	MakeComm	(0XEA02,	"I2C Status Register 1");
	MakeWord	(0XEA02);
	MakeName	(0XEA02,	"SR1");
	MakeComm	(0XEA04,	"I2C Status Register 2");
	MakeWord	(0XEA04);
	MakeName	(0XEA04,	"SR2");
	MakeComm	(0XEA06,	"I2C Clock Control Register 1");
	MakeWord	(0XEA06);
	MakeName	(0XEA06,	"CCR1");
	MakeComm	(0XEA08,	"IC2 Own Address Register 1");
	MakeWord	(0XEA08);
	MakeName	(0XEA08,	"OAR1");
	MakeComm	(0XEA0A,	"I2C Own Address Register 2");
	MakeWord	(0XEA0A);
	MakeName	(0XEA0A,	"OAR2");
	MakeComm	(0XEA0C,	"I2C Data Register");
	MakeWord	(0XEA0C);
	MakeName	(0XEA0C,	"DR");
	MakeComm	(0XEA0E,	"I2C Clock Control Register 2");
	MakeWord	(0XEA0E);
	MakeName	(0XEA0E,	"CCR2");
	MakeComm	(0XEB02,	"CLKOUT Divider Control Register");
	MakeWord	(0XEB02);
	MakeName	(0XEB02,	"XCLKOUTDIV");
	MakeComm	(0XEB10,	"X-Interrupt 0 Selection Register (read only)");
	MakeWord	(0XEB10);
	MakeName	(0XEB10,	"XIR0SEL");
	MakeComm	(0XEB12,	"X-Interrupt 0 Set Register (write only)");
	MakeWord	(0XEB12);
	MakeName	(0XEB12,	"XIR0SET");
	MakeComm	(0XEB14,	"X-Interrupt 0 Clear Register (write only)");
	MakeWord	(0XEB14);
	MakeName	(0XEB14,	"XIF0CLR");
	MakeComm	(0XEB20,	"X-Interrupt 1 Selection Register (read only)");
	MakeWord	(0XEB20);
	MakeName	(0XEB20,	"XIR1SEL");
	MakeComm	(0XEB22,	"X-Interrupt 1 Set Register (write only)");
	MakeWord	(0XEB22);
	MakeName	(0XEB22,	"XIR1SET");
	MakeComm	(0XEB24,	"X-Interrupt 1 Clear Register (write only)");
	MakeWord	(0XEB24);
	MakeName	(0XEB24,	"XIR1CLR");
	MakeWord	(0XEB26);
	MakeComm	(0XEB30,	"X-Interrupt 2 Selection Register (read only)");
	MakeWord	(0XEB30);
	MakeName	(0XEB30,	"XIR2SEL");
	MakeComm	(0XEB32,	"X-Interrupt 2 Set Register (write only)");
	MakeWord	(0XEB32);
	MakeName	(0XEB32,	"XIR2SET");
	MakeComm	(0XEB34,	"X-Interrupt 2 Clear Register (write only)");
	MakeWord	(0XEB34);
	MakeName	(0XEB34,	"XIR2CLR");
	MakeComm	(0XEB36,	"Port 1 Digital Disable Register");
	MakeWord	(0XEB36);
	MakeName	(0XEB36,	"XP1DIDIS");
	MakeComm	(0XEB40,	"X-Interrupt 3 Selection Register (read only)");
	MakeWord	(0XEB40);
	MakeName	(0XEB40,	"XIR3SEL");
	MakeComm	(0XEB42,	"X-Interrupt 3 Set Register (write only)");
	MakeWord	(0XEB42);
	MakeName	(0XEB42,	"XIR3SET");
	MakeComm	(0XEB44,	"X-Interrupt 3 Clear Register (write only)");
	MakeWord	(0XEB44);
	MakeName	(0XEB44,	"XIR3CLR");
	MakeComm	(0XEB46,	"XBUS Miscellaneous Features Register");
	MakeWord	(0XEB46);
	MakeName	(0XEB46,	"XMISC");
	MakeWord	(0XEB7E);
	MakeComm	(0XEC00,	"XPWM Module Control Register 0");
	MakeWord	(0XEC00);
	MakeName	(0XEC00,	"XPWMCON0");
	MakeComm	(0XEC02,	"XPWM Module Control Register 1");
	MakeWord	(0XEC02);
	MakeName	(0XEC02,	"XPWMCON1");
	MakeComm	(0XEC04,	"XPWM Module Channel Polarity Register");
	MakeWord	(0XEC04);
	MakeName	(0XEC04,	"XPOLAR");
	MakeComm	(0XEC06,	"XPWM Module Set Control Register 0 (write only)");
	MakeWord	(0XEC06);
	MakeName	(0XEC06,	"XPMWCON0SET");
	MakeComm	(0XEC08,	"XPWM Module Clear Control Register 0 (write only)");
	MakeWord	(0XEC08);
	MakeName	(0XEC08,	"XPMWCON0CLR");
	MakeComm	(0XEC0A,	"XPWM Module Set Control Register 1 (write only)");
	MakeWord	(0XEC0A);
	MakeName	(0XEC0A,	"XPMWCON1SET");
	MakeComm	(0XEC0C,	"XPWM Module Clear Control Register 1 (write only)");
	MakeWord	(0XEC0C);
	MakeName	(0XEC0C,	"XPMWCON1CLR");
	MakeComm	(0XEC10,	"XPWM Module Up/Down Register 0");
	MakeWord	(0XEC10);
	MakeName	(0XEC10,	"XPT0");
	MakeComm	(0XEC12,	"XPWM Module Up/Down Register 1");
	MakeWord	(0XEC12);
	MakeName	(0XEC12,	"XPT1");
	MakeComm	(0XEC14,	"XPWM Module Up/Down Register 2");
	MakeWord	(0XEC14);
	MakeName	(0XEC14,	"XPT2");
	MakeComm	(0XEC16,	"XPWM Module Up/Down Register 3");
	MakeWord	(0XEC16);
	MakeName	(0XEC16,	"XPT3");
	MakeComm	(0XEC20,	"XPWM Module Period Register 0");
	MakeWord	(0XEC20);
	MakeName	(0XEC20,	"XPP0");
	MakeComm	(0XEC22,	"XPWM Module Period Register 1");
	MakeWord	(0XEC22);
	MakeName	(0XEC22,	"XPP1");
	MakeComm	(0XEC24,	"XPWM Module Period Register 2");
	MakeWord	(0XEC24);
	MakeName	(0XEC24,	"XPP2");
	MakeComm	(0XEC26,	"XPWM Module Period Register 3");
	MakeWord	(0XEC26);
	MakeName	(0XEC26,	"XPP3");
	MakeComm	(0XEC30,	"XPWM Module Pulse Width Register 0");
	MakeWord	(0XEC30);
	MakeName	(0XEC30,	"XPW0");
	MakeComm	(0XEC32,	"XPWM Module Pulse Width Register 1");
	MakeWord	(0XEC32);
	MakeName	(0XEC32,	"XPW1");
	MakeComm	(0XEC34,	"XPWM Module Pulse Width Register 2");
	MakeWord	(0XEC34);
	MakeName	(0XEC34,	"XPW2");
	MakeComm	(0XEC36,	"XPWM Module Pulse Width Register 3");
	MakeWord	(0XEC36);
	MakeName	(0XEC36,	"XPW3");
	MakeComm	(0XEC80,	"XPWM Module Port Control Register");
	MakeWord	(0XEC80);
	MakeName	(0XEC80,	"XPWMPORT");
	MakeComm	(0XED00,	"RTC Control Register");
	MakeWord	(0XED00);
	MakeName	(0XED00,	"RTCCON");
	MakeComm	(0XED06,	"RTC Prescaler Register Low Byte");
	MakeWord	(0XED06);
	MakeName	(0XED06,	"RTCPL");
	MakeComm	(0XED08,	"RTC Prescaler Register High Byte");
	MakeWord	(0XED08);
	MakeName	(0XED08,	"RTCPH");
	MakeComm	(0XED0A,	"RTC Divider Counter Low Byte");
	MakeWord	(0XED0A);
	MakeName	(0XED0A,	"RTCDL");
	MakeComm	(0XED0C,	"RTC Divider Counter High Byte");
	MakeWord	(0XED0C);
	MakeName	(0XED0C,	"RTCDH");
	MakeComm	(0XED0E,	"RTC Programmable Counter Low Byte");
	MakeWord	(0XED0E);
	MakeName	(0XED0E,	"RTCL");
	MakeComm	(0XED10,	"RTC Programmable Counter High Byte");
	MakeWord	(0XED10);
	MakeName	(0XED10,	"RTCH");
	MakeComm	(0XED12,	"RTC Alarm Register Low Byte");
	MakeWord	(0XED12);
	MakeName	(0XED12,	"RTCAL");
	MakeComm	(0XED14,	"RTC Alarm Register High Byte");
	MakeWord	(0XED14);
	MakeName	(0XED14,	"RTCAH");
	MakeWord	(0XF000);
	MakeName	(0XF000,	"QX0");
	MakeWord	(0XF002);
	MakeName	(0XF002,	"QX1");
	MakeWord	(0XF004);
	MakeName	(0XF004,	"QR0");
	MakeWord	(0XF006);
	MakeName	(0XF006,	"QR1");
	MakeWord	(0XF01C);
	MakeWord	(0XF024);
	MakeName	(0XF024,	"XPERCON");
	MakeWord	(0XF030);
	MakeName	(0XF030,	"PT0");
	MakeWord	(0XF032);
	MakeName	(0XF032,	"PT1");
	MakeWord	(0XF034);
	MakeName	(0XF034,	"PT2");
	MakeWord	(0XF036);
	MakeName	(0XF036,	"PT3");
	MakeWord	(0XF038);
	MakeName	(0XF038,	"PP0");
	MakeWord	(0XF03A);
	MakeName	(0XF03A,	"PP1");
	MakeWord	(0XF03C);
	MakeName	(0XF03C,	"PP2");
	MakeWord	(0XF03E);
	MakeName	(0XF03E,	"PP3");
	MakeWord	(0XF050);
	MakeName	(0XF050,	"T7");
	MakeWord	(0XF052);
	MakeName	(0XF052,	"T8");
	MakeWord	(0XF054);
	MakeName	(0XF054,	"T7REL");
	MakeWord	(0XF056);
	MakeName	(0XF056,	"T8REL");
	MakeWord	(0XF078);
	MakeName	(0XF078,	"IDPROG");
	MakeWord	(0XF07A);
	MakeName	(0XF07A,	"IDMEM");
	MakeWord	(0XF07C);
	MakeName	(0XF07C,	"IDCHIP");
	MakeWord	(0XF07E);
	MakeName	(0XF07E,	"IDMANUF");
	MakeWord	(0XF0A0);
	MakeName	(0XF0A0,	"ADDAT2");
	MakeWord	(0XF0B0);
	MakeName	(0XF0B0,	"SSCTB");
	MakeWord	(0XF0B2);
	MakeName	(0XF0B2,	"SSCRB");
	MakeWord	(0XF0B4);
	MakeName	(0XF0B4,	"SSCBR");
	MakeWord	(0XF100);
	MakeName	(0XF100,	"DP0L");
	MakeWord	(0XF102);
	MakeName	(0XF102,	"DP0H");
	MakeWord	(0XF104);
	MakeName	(0XF104,	"DP1L");
	MakeWord	(0XF106);
	MakeName	(0XF106,	"DP1H");
	MakeWord	(0XF108);
	MakeName	(0XF108,	"RP0H");
	MakeWord	(0XF160);
	MakeName	(0XF160,	"CC16IC");
	MakeWord	(0XF162);
	MakeName	(0XF162,	"CC17IC");
	MakeWord	(0XF164);
	MakeName	(0XF164,	"CC18IC");
	MakeWord	(0XF166);
	MakeName	(0XF166,	"CC19IC");
	MakeWord	(0XF168);
	MakeName	(0XF168,	"CC20IC");
	MakeWord	(0XF16A);
	MakeName	(0XF16A,	"CC21IC");
	MakeWord	(0XF16C);
	MakeName	(0XF16C,	"CC22IC");
	MakeWord	(0XF16E);
	MakeName	(0XF16E,	"CC23IC");
	MakeWord	(0XF170);
	MakeName	(0XF170,	"CC24IC");
	MakeWord	(0XF172);
	MakeName	(0XF172,	"CC25IC");
	MakeWord	(0XF174);
	MakeName	(0XF174,	"CC26IC");
	MakeWord	(0XF176);
	MakeName	(0XF176,	"CC27IC");
	MakeWord	(0XF178);
	MakeName	(0XF178,	"CC28IC");
	MakeWord	(0XF17A);
	MakeName	(0XF17A,	"T7IC");
	MakeWord	(0XF17C);
	MakeName	(0XF17C,	"T8IC");
	MakeWord	(0XF17E);
	MakeName	(0XF17E,	"PWMIC");
	MakeWord	(0XF184);
	MakeName	(0XF184,	"CC29IC");
	MakeWord	(0XF186);
	MakeName	(0XF186,	"XP0IC");
	MakeWord	(0XF18C);
	MakeName	(0XF18C,	"CC30IC");
	MakeWord	(0XF18E);
	MakeName	(0XF18E,	"XP1IC");
	MakeWord	(0XF194);
	MakeName	(0XF194,	"CC31IC");
	MakeWord	(0XF196);
	MakeName	(0XF196,	"XP2IC");
	MakeWord	(0XF19C);
	MakeName	(0XF19C,	"S0TBIC");
	MakeWord	(0XF19E);
	MakeName	(0XF19E,	"XP3IC");
	MakeWord	(0XF1C0);
	MakeName	(0XF1C0,	"EXICON");
	MakeWord	(0XF1C2);
	MakeName	(0XF1C2,	"ODP2");
	MakeWord	(0XF1C4);
	MakeWord	(0XF1C6);
	MakeName	(0XF1C6,	"ODP3");
	MakeWord	(0XF1CA);
	MakeName	(0XF1CA,	"ODP4");
	MakeWord	(0XF1CE);
	MakeName	(0XF1CE,	"ODP6");
	MakeWord	(0XF1D2);
	MakeName	(0XF1D2,	"ODP7");
	MakeWord	(0XF1D6);
	MakeName	(0XF1D6,	"ODP8");
	MakeWord	(0XF1DA);
	MakeName	(0XF1DA,	"EXISEL");
	MakeByte	(0XF700);
	MakeWord	(0XF722);
	MakeWord	(0XFAE0);
	MakeByte	(0XFBB0);
	MakeWord	(0XFCE0);
	MakeName	(0XFCE0,	"SRCP0");
	MakeWord	(0XFCE2);
	MakeName	(0XFCE2,	"DSTP0");
	MakeWord	(0XFCE4);
	MakeName	(0XFCE4,	"SRCP1");
	MakeWord	(0XFCE6);
	MakeName	(0XFCE6,	"DSTP1");
	MakeWord	(0XFCE8);
	MakeName	(0XFCE8,	"SRCP2");
	MakeWord	(0XFCEA);
	MakeName	(0XFCEA,	"DSTP2");
	MakeWord	(0XFCEC);
	MakeName	(0XFCEC,	"SRCP3");
	MakeWord	(0XFCEE);
	MakeName	(0XFCEE,	"DSTP3");
	MakeWord	(0XFCF0);
	MakeName	(0XFCF0,	"SRCP4");
	MakeWord	(0XFCF2);
	MakeName	(0XFCF2,	"DSTP4");
	MakeWord	(0XFCF4);
	MakeName	(0XFCF4,	"SRCP5");
	MakeWord	(0XFCF6);
	MakeName	(0XFCF6,	"DSTP5");
	MakeWord	(0XFCF8);
	MakeName	(0XFCF8,	"SRCP6");
	MakeWord	(0XFCFA);
	MakeName	(0XFCFA,	"DSTP6");
	MakeWord	(0XFCFC);
	MakeName	(0XFCFC,	"SRCP7");
	MakeWord	(0XFCFE);
	MakeName	(0XFCFE,	"DSTP7");
	MakeWord	(0XFD00);
	MakeWord	(0XFD0C);
	MakeWord	(0XFE00);
	MakeName	(0XFE00,	"DPP0");
	MakeWord	(0XFE02);
	MakeName	(0XFE02,	"DPP1");
	MakeWord	(0XFE04);
	MakeName	(0XFE04,	"DPP2");
	MakeWord	(0XFE06);
	MakeName	(0XFE06,	"DPP3");
	MakeRptCmt	(0XFE08,	"CPU code segment pointer register");
	MakeWord	(0XFE08);
	MakeName	(0XFE08,	"CSP");
	MakeWord	(0XFE0A);
	MakeName	(0XFE0A,	"EMUCON");
	MakeWord	(0XFE0C);
	MakeName	(0XFE0C,	"MDH");
	MakeWord	(0XFE0E);
	MakeName	(0XFE0E,	"MDL");
	MakeWord	(0XFE10);
	MakeName	(0XFE10,	"CP");
	MakeWord	(0XFE12);
	MakeName	(0XFE12,	"SP");
	MakeWord	(0XFE14);
	MakeName	(0XFE14,	"STKOV");
	MakeWord	(0XFE16);
	MakeName	(0XFE16,	"STKUN");
	MakeWord	(0XFE18);
	MakeName	(0XFE18,	"ADDRSEL1");
	MakeWord	(0XFE1A);
	MakeName	(0XFE1A,	"ADDRSEL2");
	MakeWord	(0XFE1C);
	MakeName	(0XFE1C,	"ADDRSEL3");
	MakeWord	(0XFE1E);
	MakeName	(0XFE1E,	"ADDRSEL4");
	MakeWord	(0XFE30);
	MakeName	(0XFE30,	"PW0");
	MakeWord	(0XFE32);
	MakeName	(0XFE32,	"PW1");
	MakeWord	(0XFE34);
	MakeName	(0XFE34,	"PW2");
	MakeWord	(0XFE36);
	MakeName	(0XFE36,	"PW3");
	MakeWord	(0XFE40);
	MakeName	(0XFE40,	"T2");
	MakeWord	(0XFE42);
	MakeName	(0XFE42,	"T3");
	MakeWord	(0XFE44);
	MakeName	(0XFE44,	"T4");
	MakeWord	(0XFE46);
	MakeName	(0XFE46,	"T5");
	MakeWord	(0XFE48);
	MakeName	(0XFE48,	"T6");
	MakeWord	(0XFE4A);
	MakeName	(0XFE4A,	"CAPREL");
	MakeRptCmt	(0XFE50,	"CAPCOM timer 0 register");
	MakeWord	(0XFE50);
	MakeName	(0XFE50,	"T0");
	MakeWord	(0XFE52);
	MakeName	(0XFE52,	"T1");
	MakeWord	(0XFE54);
	MakeName	(0XFE54,	"T0REL");
	MakeWord	(0XFE56);
	MakeName	(0XFE56,	"T1REL");
	MakeWord	(0XFE5C);
	MakeName	(0XFE5C,	"MAL");
	MakeWord	(0XFE5E);
	MakeName	(0XFE5E,	"MAH");
	MakeWord	(0XFE60);
	MakeName	(0XFE60,	"CC16");
	MakeWord	(0XFE62);
	MakeName	(0XFE62,	"CC17");
	MakeWord	(0XFE64);
	MakeName	(0XFE64,	"CC18");
	MakeWord	(0XFE66);
	MakeName	(0XFE66,	"CC19");
	MakeWord	(0XFE68);
	MakeName	(0XFE68,	"CC20");
	MakeWord	(0XFE6A);
	MakeName	(0XFE6A,	"CC21");
	MakeWord	(0XFE6C);
	MakeName	(0XFE6C,	"CC22");
	MakeWord	(0XFE6E);
	MakeName	(0XFE6E,	"CC23");
	MakeWord	(0XFE70);
	MakeName	(0XFE70,	"CC24");
	MakeWord	(0XFE72);
	MakeName	(0XFE72,	"CC25");
	MakeWord	(0XFE74);
	MakeName	(0XFE74,	"CC26");
	MakeWord	(0XFE76);
	MakeName	(0XFE76,	"CC27");
	MakeWord	(0XFE78);
	MakeName	(0XFE78,	"CC28");
	MakeWord	(0XFE7A);
	MakeName	(0XFE7A,	"CC29");
	MakeWord	(0XFE7C);
	MakeName	(0XFE7C,	"CC30");
	MakeWord	(0XFE7E);
	MakeName	(0XFE7E,	"CC31");
	MakeWord	(0XFE80);
	MakeName	(0XFE80,	"CC0");
	MakeWord	(0XFE82);
	MakeName	(0XFE82,	"CC1");
	MakeWord	(0XFE84);
	MakeName	(0XFE84,	"CC2");
	MakeWord	(0XFE86);
	MakeName	(0XFE86,	"CC3");
	MakeWord	(0XFE88);
	MakeName	(0XFE88,	"CC4");
	MakeWord	(0XFE8A);
	MakeName	(0XFE8A,	"CC5");
	MakeWord	(0XFE8C);
	MakeName	(0XFE8C,	"CC6");
	MakeWord	(0XFE8E);
	MakeName	(0XFE8E,	"CC7");
	MakeWord	(0XFE90);
	MakeName	(0XFE90,	"CC8");
	MakeWord	(0XFE92);
	MakeName	(0XFE92,	"CC9");
	MakeWord	(0XFE94);
	MakeName	(0XFE94,	"CC10");
	MakeWord	(0XFE96);
	MakeName	(0XFE96,	"CC11");
	MakeWord	(0XFE98);
	MakeName	(0XFE98,	"CC12");
	MakeWord	(0XFE9A);
	MakeName	(0XFE9A,	"CC13");
	MakeWord	(0XFE9C);
	MakeName	(0XFE9C,	"CC14");
	MakeWord	(0XFE9E);
	MakeName	(0XFE9E,	"CC15");
	MakeWord	(0XFEA0);
	MakeName	(0XFEA0,	"ADDAT");
	MakeWord	(0XFEAE);
	MakeName	(0XFEAE,	"WDT");
	MakeWord	(0XFEB0);
	MakeName	(0XFEB0,	"S0TBUF");
	MakeWord	(0XFEB2);
	MakeName	(0XFEB2,	"S0RBUF");
	MakeWord	(0XFEB4);
	MakeName	(0XFEB4,	"S0BG");
	MakeWord	(0XFEC0);
	MakeName	(0XFEC0,	"PECC0");
	MakeWord	(0XFEC2);
	MakeName	(0XFEC2,	"PECC1");
	MakeWord	(0XFEC4);
	MakeName	(0XFEC4,	"PECC2");
	MakeWord	(0XFEC6);
	MakeName	(0XFEC6,	"PECC3");
	MakeWord	(0XFEC8);
	MakeName	(0XFEC8,	"PECC4");
	MakeWord	(0XFECA);
	MakeName	(0XFECA,	"PECC5");
	MakeWord	(0XFECC);
	MakeName	(0XFECC,	"PECC6");
	MakeWord	(0XFECE);
	MakeName	(0XFECE,	"PECC7");
	MakeWord	(0XFF00);
	MakeName	(0XFF00,	"P0L");
	MakeWord	(0XFF02);
	MakeName	(0XFF02,	"P0H");
	MakeWord	(0XFF04);
	MakeName	(0XFF04,	"P1L");
	MakeWord	(0XFF06);
	MakeName	(0XFF06,	"P1H");
	MakeWord	(0XFF08);
	MakeName	(0XFF08,	"IDX0");
	MakeWord	(0XFF0A);
	MakeName	(0XFF0A,	"IDX1");
	MakeWord	(0XFF0C);
	MakeName	(0XFF0C,	"BUSCON0");
	MakeWord	(0XFF0E);
	MakeName	(0XFF0E,	"MDC");
	MakeWord	(0XFF10);
	MakeName	(0XFF10,	"PSW");
	MakeWord	(0XFF12);
	MakeName	(0XFF12,	"SYSCON");
	MakeWord	(0XFF14);
	MakeName	(0XFF14,	"BUSCON1");
	MakeWord	(0XFF16);
	MakeName	(0XFF16,	"BUSCON2");
	MakeWord	(0XFF18);
	MakeName	(0XFF18,	"BUSCON3");
	MakeWord	(0XFF1A);
	MakeName	(0XFF1A,	"BUSCON4");
	MakeWord	(0XFF1C);
	MakeName	(0XFF1C,	"ZEROS");
	MakeWord	(0XFF1E);
	MakeName	(0XFF1E,	"ONES");
	MakeWord	(0XFF20);
	MakeName	(0XFF20,	"T78CON");
	MakeWord	(0XFF22);
	MakeName	(0XFF22,	"CCM4");
	MakeWord	(0XFF24);
	MakeName	(0XFF24,	"CCM5");
	MakeWord	(0XFF26);
	MakeName	(0XFF26,	"CCM6");
	MakeWord	(0XFF28);
	MakeName	(0XFF28,	"CCM7");
	MakeWord	(0XFF30);
	MakeName	(0XFF30,	"PWMCON0");
	MakeWord	(0XFF32);
	MakeName	(0XFF32,	"PWMCON1");
	MakeWord	(0XFF40);
	MakeName	(0XFF40,	"T2CON");
	MakeWord	(0XFF42);
	MakeName	(0XFF42,	"T3CON");
	MakeWord	(0XFF44);
	MakeName	(0XFF44,	"T4CON");
	MakeWord	(0XFF46);
	MakeName	(0XFF46,	"T5CON");
	MakeWord	(0XFF48);
	MakeName	(0XFF48,	"T6CON");
	MakeWord	(0XFF50);
	MakeName	(0XFF50,	"T01CON");
	MakeWord	(0XFF52);
	MakeName	(0XFF52,	"CCM0");
	MakeWord	(0XFF54);
	MakeName	(0XFF54,	"CCM1");
	MakeWord	(0XFF56);
	MakeName	(0XFF56,	"CCM2");
	MakeWord	(0XFF58);
	MakeName	(0XFF58,	"CCM3");
	MakeWord	(0XFF60);
	MakeName	(0XFF60,	"T2IC");
	MakeWord	(0XFF62);
	MakeName	(0XFF62,	"T3IC");
	MakeWord	(0XFF64);
	MakeName	(0XFF64,	"T4IC");
	MakeWord	(0XFF66);
	MakeName	(0XFF66,	"T5IC");
	MakeWord	(0XFF68);
	MakeName	(0XFF68,	"T6IC");
	MakeWord	(0XFF6A);
	MakeName	(0XFF6A,	"CRIC");
	MakeWord	(0XFF6C);
	MakeName	(0XFF6C,	"S0TIC");
	MakeWord	(0XFF6E);
	MakeName	(0XFF6E,	"S0RIC");
	MakeWord	(0XFF70);
	MakeName	(0XFF70,	"S0EIC");
	MakeWord	(0XFF72);
	MakeName	(0XFF72,	"SSCTIC");
	MakeWord	(0XFF74);
	MakeName	(0XFF74,	"SSCRIC");
	MakeWord	(0XFF76);
	MakeName	(0XFF76,	"SSCEIC");
	MakeWord	(0XFF78);
	MakeName	(0XFF78,	"CC0IC");
	MakeWord	(0XFF7A);
	MakeName	(0XFF7A,	"CC1IC");
	MakeWord	(0XFF7C);
	MakeName	(0XFF7C,	"CC2IC");
	MakeWord	(0XFF7E);
	MakeName	(0XFF7E,	"CC3IC");
	MakeWord	(0XFF80);
	MakeName	(0XFF80,	"CC4IC");
	MakeWord	(0XFF82);
	MakeName	(0XFF82,	"CC5IC");
	MakeWord	(0XFF84);
	MakeName	(0XFF84,	"CC6IC");
	MakeWord	(0XFF86);
	MakeName	(0XFF86,	"CC7IC");
	MakeWord	(0XFF88);
	MakeName	(0XFF88,	"CC8IC");
	MakeWord	(0XFF8A);
	MakeName	(0XFF8A,	"CC9IC");
	MakeWord	(0XFF8C);
	MakeName	(0XFF8C,	"CC10IC");
	MakeWord	(0XFF8E);
	MakeName	(0XFF8E,	"CC11IC");
	MakeWord	(0XFF90);
	MakeName	(0XFF90,	"CC12IC");
	MakeWord	(0XFF92);
	MakeName	(0XFF92,	"CC13IC");
	MakeWord	(0XFF94);
	MakeName	(0XFF94,	"CC14IC");
	MakeWord	(0XFF96);
	MakeName	(0XFF96,	"CC15IC");
	MakeWord	(0XFF98);
	MakeName	(0XFF98,	"ADCIC");
	MakeWord	(0XFF9A);
	MakeName	(0XFF9A,	"ADEIC");
	MakeWord	(0XFF9C);
	MakeName	(0XFF9C,	"T0IC");
	MakeWord	(0XFF9E);
	MakeName	(0XFF9E,	"T1IC");
	MakeWord	(0XFFA0);
	MakeName	(0XFFA0,	"ADCON");
	MakeWord	(0XFFA2);
	MakeName	(0XFFA2,	"P5");
	MakeWord	(0XFFA4);
	MakeName	(0XFFA4,	"P5DIDIS");
	MakeWord	(0XFFAC);
	MakeName	(0XFFAC,	"TFR");
	MakeWord	(0XFFAE);
	MakeName	(0XFFAE,	"WDTCON");
	MakeWord	(0XFFB0);
	MakeName	(0XFFB0,	"S0CON");
	MakeComm	(0XFFB2,	"(???)");
	MakeWord	(0XFFB2);
	MakeName	(0XFFB2,	"SSCCON");
	MakeWord	(0XFFC0);
	MakeName	(0XFFC0,	"P2");
	MakeWord	(0XFFC2);
	MakeName	(0XFFC2,	"DP2");
	MakeWord	(0XFFC4);
	MakeName	(0XFFC4,	"P3");
	MakeWord	(0XFFC6);
	MakeName	(0XFFC6,	"DP3");
	MakeWord	(0XFFC8);
	MakeName	(0XFFC8,	"P4");
	MakeWord	(0XFFCA);
	MakeName	(0XFFCA,	"DP4");
	MakeWord	(0XFFCC);
	MakeName	(0XFFCC,	"P6");
	MakeWord	(0XFFCE);
	MakeName	(0XFFCE,	"DP6");
	MakeWord	(0XFFD0);
	MakeName	(0XFFD0,	"P7");
	MakeWord	(0XFFD2);
	MakeName	(0XFFD2,	"DP7");
	MakeWord	(0XFFD4);
	MakeName	(0XFFD4,	"P8");
	MakeWord	(0XFFD6);
	MakeName	(0XFFD6,	"DP8");
	MakeWord	(0XFFDA);
	MakeName	(0XFFDA,	"MRW");
	MakeWord	(0XFFDC);
	MakeName	(0XFFDC,	"MCW");
	MakeWord	(0XFFDE);
	MakeName	(0XFFDE,	"MSW");
	MakeWord	(0XFFE0);
	MakeName	(0XFFE0,	"r0");
	MakeWord	(0XFFE2);
	MakeName	(0XFFE2,	"r1");
	MakeWord	(0XFFE4);
	MakeName	(0XFFE4,	"r2");
	MakeWord	(0XFFE6);
	MakeName	(0XFFE6,	"r3");
	MakeWord	(0XFFE8);
	MakeName	(0XFFE8,	"r4");
	MakeWord	(0XFFEA);
	MakeName	(0XFFEA,	"r5");
	MakeWord	(0XFFEC);
	MakeName	(0XFFEC,	"r6");
	MakeWord	(0XFFEE);
	MakeName	(0XFFEE,	"r7");
	MakeWord	(0XFFF0);
	MakeName	(0XFFF0,	"r8");
	MakeWord	(0XFFF2);
	MakeName	(0XFFF2,	"r9");
	MakeWord	(0XFFF4);
	MakeName	(0XFFF4,	"r10");
	MakeWord	(0XFFF6);
	MakeName	(0XFFF6,	"r11");
	MakeWord	(0XFFF8);
	MakeName	(0XFFF8,	"r12");
	MakeWord	(0XFFFA);
	MakeName	(0XFFFA,	"r13");
	MakeWord	(0XFFFC);
	MakeName	(0XFFFC,	"r14");
	MakeWord	(0XFFFE);
	MakeName	(0XFFFE,	"r15");
	MakeWord	(0X18000);
	MakeWord	(0X18002);
	MakeCode	(0X18034);
	MakeCode	(x=0X1803E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1804A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X18054);
	OpDecimal	(x,	1);
	MakeCode	(x=0X18062);
	OpDecimal	(x,	1);
	MakeCode	(0X1807A);
	MakeCode	(x=0X1808E);
	OpDecimal	(x,	0);
	MakeCode	(0X180B6);
	MakeCode	(x=0X180F0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X18120);
	OpDecimal	(x,	1);
	MakeCode	(x=0X18134);
	OpHex		(x,	1);
	MakeCode	(x=0X18140);
	OpHex		(x,	1);
	MakeCode	(0X18154);
	MakeCode	(x=0X18166);
	OpDecimal	(x,	1);
	MakeCode	(x=0X18174);
	OpDecimal	(x,	1);
	MakeCode	(x=0X18178);
	OpDecimal	(x,	1);
	MakeCode	(0X18192);
	MakeCode	(0X181CA);
	MakeCode	(x=0X181D2);
	OpDecimal	(x,	1);
	MakeCode	(0X18220);
	MakeCode	(x=0X1824C);
	OpDecimal	(x,	1);
	MakeCode	(0X1825C);
	MakeCode	(0X1827E);
	MakeCode	(0X18286);
	MakeCode	(0X182A0);
	MakeCode	(x=0X182A8);
	OpDecimal	(x,	1);
	MakeCode	(0X182D2);
	MakeCode	(0X182DC);
	MakeCode	(x=0X182FE);
	OpDecimal	(x,	1);
	MakeCode	(x=0X18324);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1832C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X18334);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1833E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X18346);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1834E);
	OpDecimal	(x,	1);
	MakeCode	(0X18366);
	MakeCode	(0X18378);
	MakeCode	(x=0X18394);
	OpDecimal	(x,	1);
	MakeCode	(0X183A6);
	MakeCode	(0X183CC);
	MakeCode	(0X183E4);
	MakeCode	(x=0X183EC);
	OpDecimal	(x,	1);
	MakeCode	(0X183FC);
	MakeCode	(x=0X18404);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1840C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X18424);
	OpDecimal	(x,	1);
	MakeCode	(0X18444);
	MakeCode	(x=0X18454);
	OpDecimal	(x,	1);
	MakeCode	(0X18466);
	MakeCode	(x=0X1846E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1848C);
	OpDecimal	(x,	1);
	MakeCode	(0X184A8);
	MakeCode	(x=0X184B0);
	OpDecimal	(x,	1);
	MakeCode	(0X184CE);
	MakeCode	(x=0X184EE);
	OpDecimal	(x,	1);
	MakeCode	(0X18512);
	MakeCode	(x=0X18532);
	OpDecimal	(x,	0);
	MakeCode	(x=0X18534);
	OpHex		(x,	1);
	MakeCode	(0X18544);
	MakeCode	(x=0X18546);
	OpDecimal	(x,	0);
	MakeCode	(x=0X18548);
	OpHex		(x,	1);
	MakeCode	(0X1856C);
	MakeCode	(x=0X18576);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1857E);
	OpDecimal	(x,	1);
	MakeCode	(0X18676);
	MakeCode	(0X18BB4);
	MakeCode	(x=0X18BC8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X18BD0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X18BD2);
	OpHex		(x,	1);
	MakeCode	(0X18C76);
	MakeCode	(0X18C92);
	MakeCode	(0X19064);
	MakeCode	(x=0X19074);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1907C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1907E);
	OpHex		(x,	1);
	MakeCode	(0X197B8);
	MakeCode	(x=0X197C8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X197D0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X197D2);
	OpHex		(x,	1);
	MakeCode	(0X1983E);
	MakeCode	(x=0X1987E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X19882);
	OpDecimal	(x,	1);
	MakeCode	(0X198A2);
	MakeCode	(0X198B4);
	MakeCode	(x=0X198C2);
	OpDecimal	(x,	0);
	MakeCode	(0X1C6C4);
	MakeCode	(x=0X1C6C8);
	OpDecimal	(x,	0);
	MakeCode	(0X1C6DA);
	MakeCode	(0X1DD56);
	MakeCode	(x=0X1DD6C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1DD74);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1DD88);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1DD90);
	OpDecimal	(x,	1);
	MakeCode	(0X1DDAC);
	MakeCode	(0X1DDBA);
	MakeCode	(0X1DDCE);
	MakeCode	(0X1DDE2);
	MakeCode	(x=0X1DDF4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1DE02);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1DE10);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1DE1E);
	OpDecimal	(x,	1);
	MakeCode	(0X1DE30);
	MakeCode	(x=0X1DE38);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1DE46);
	OpDecimal	(x,	1);
	MakeCode	(0X1DE58);
	MakeCode	(0X1DE6E);
	MakeCode	(0X1DEAE);
	MakeCode	(x=0X1DEE4);
	OpDecimal	(x,	1);
	MakeCode	(0X1DEF6);
	MakeCode	(x=0X1DF00);
	OpDecimal	(x,	1);
	MakeCode	(0X1DF28);
	MakeCode	(0X1DF4E);
	MakeCode	(0X1DF50);
	MakeCode	(x=0X1DF68);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1DF76);
	OpDecimal	(x,	1);
	MakeCode	(0X1DF92);
	MakeCode	(0X1DFA6);
	MakeCode	(0X1DFA8);
	MakeCode	(x=0X1DFC0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1DFCE);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1E01C);
	OpHex		(x,	1);
	MakeCode	(x=0X1E030);
	OpHex		(x,	1);
	MakeCode	(0X1E068);
	MakeCode	(0X1E072);
	MakeCode	(0X1E0A2);
	MakeCode	(0X1E0AC);
	MakeCode	(0X1E0C0);
	MakeCode	(0X1E0C6);
	MakeCode	(x=0X1E0D2);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1E0E0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1E0EE);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1E0FC);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1E12A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1E13C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1E152);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1E160);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1E172);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1E180);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1E18E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1E19C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1E28A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1E29C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1E2AE);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1E2C0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1E2D2);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1E2E4);
	OpDecimal	(x,	0);
	MakeCode	(0X1E310);
	MakeWord	(0X1FFFE);
	MakeCode	(0X2004E);
	MakeCode	(x=0X2006C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X20070);
	OpDecimal	(x,	1);
	MakeCode	(0X24322);
	MakeCode	(0X24330);
	MakeCode	(0X2710A);
	MakeCode	(x=0X27112);
	OpDecimal	(x,	0);
	MakeCode	(0X943A8);
	MakeCode	(x=0X943AA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X943B0);
	OpHex		(x,	1);
	MakeCode	(x=0X943B4);
	OpDecimal	(x,	1);
	MakeCode	(0X943C6);
	MakeCode	(0X943DC);
	MakeCode	(0X943F4);
	MakeCode	(x=0X943F8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X9440C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X9440E);
	OpDecimal	(x,	1);
	MakeCode	(0X94432);
	MakeCode	(0X9505E);
	MakeCode	(x=0X95062);
	OpDecimal	(x,	1);
	MakeCode	(x=0X9508C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X95096);
	OpDecimal	(x,	1);
	MakeCode	(x=0X950A0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X950A8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X950B2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X950BC);
	OpDecimal	(x,	1);
	MakeCode	(0X950D2);
	MakeCode	(0X950E2);
	MakeCode	(0X950F6);
	MakeCode	(0X95122);
	MakeCode	(x=0X9512A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X9513C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X9513E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X95164);
	OpDecimal	(x,	1);
	MakeCode	(x=0X95166);
	OpDecimal	(x,	1);
	MakeCode	(x=0X95178);
	OpDecimal	(x,	1);
	MakeCode	(x=0X9517C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X95186);
	OpDecimal	(x,	1);
	MakeCode	(x=0X9518E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X95192);
	OpDecimal	(x,	1);
	MakeCode	(0X951A4);
	MakeCode	(0X951B2);
	MakeCode	(x=0X951B4);
	OpDecimal	(x,	1);
	MakeCode	(0X951DA);
	MakeCode	(x=0X951E4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X951E6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X951E8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X951F4);
	OpHex		(x,	1);
	MakeCode	(x=0X951FE);
	OpHex		(x,	1);
	MakeCode	(0X95214);
	MakeCode	(0X95230);
	MakeCode	(0X95240);
	MakeCode	(0X95260);
	MakeCode	(0X952B6);
	MakeCode	(0X952C0);
	MakeCode	(0X952DC);
	MakeCode	(0X952F8);
	MakeCode	(0X95310);
	MakeCode	(x=0X9532A);
	OpHex		(x,	1);
	MakeCode	(x=0X9532E);
	OpHex		(x,	1);
	MakeCode	(x=0X95338);
	OpHex		(x,	1);
	MakeCode	(x=0X95364);
	OpHex		(x,	1);
	MakeCode	(x=0X9537C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X95388);
	OpDecimal	(x,	1);
	MakeCode	(x=0X953AC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X953B6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X953C4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X953C6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X953C8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X953E4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X953E8);
	OpDecimal	(x,	1);
	MakeCode	(0X953FC);
	MakeCode	(0X95400);
	MakeCode	(x=0X95404);
	OpHex		(x,	1);
	MakeCode	(x=0X95408);
	OpHex		(x,	1);
	MakeCode	(0X95414);
	MakeCode	(0X9541E);
	MakeCode	(x=0X9542E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X9543A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X9545E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X95468);
	OpDecimal	(x,	1);
	MakeCode	(x=0X95476);
	OpDecimal	(x,	1);
	MakeCode	(x=0X95478);
	OpDecimal	(x,	1);
	MakeCode	(x=0X9547A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X954A2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X954A6);
	OpDecimal	(x,	1);
	MakeCode	(0X954BA);
	MakeCode	(x=0X954CE);
	OpDecimal	(x,	1);
	MakeCode	(x=0X954DA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X954F6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X95500);
	OpDecimal	(x,	1);
	MakeCode	(x=0X9550E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X95510);
	OpDecimal	(x,	1);
	MakeCode	(x=0X95512);
	OpDecimal	(x,	1);
	MakeCode	(x=0X9552E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X95530);
	OpHex		(x,	1);
	MakeCode	(x=0X95534);
	OpHex		(x,	1);
	MakeCode	(x=0X9554E);
	OpHex		(x,	1);
	MakeCode	(x=0X95552);
	OpHex		(x,	1);
	MakeCode	(0X9555C);
	MakeCode	(x=0X95578);
	OpHex		(x,	1);
	MakeCode	(x=0X9557C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X9558A);
	OpHex		(x,	1);
	MakeCode	(x=0X95590);
	OpDecimal	(x,	1);
	MakeCode	(x=0X9559C);
	OpHex		(x,	1);
	MakeCode	(x=0X955A0);
	OpHex		(x,	1);
	MakeCode	(0X955B0);
	MakeCode	(x=0X955CC);
	OpHex		(x,	1);
	MakeCode	(x=0X955D4);
	OpHex		(x,	1);
	MakeCode	(0X957B0);
	MakeCode	(x=0X957C8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X957CA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X957D0);
	OpHex		(x,	1);
	MakeCode	(0X957DE);
	MakeCode	(x=0X957EE);
	OpHex		(x,	1);
	MakeCode	(0X9580A);
	MakeCode	(x=0X9582C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X95840);
	OpDecimal	(x,	1);
	MakeCode	(x=0X95856);
	OpDecimal	(x,	1);
	MakeCode	(x=0X95862);
	OpDecimal	(x,	1);
	MakeCode	(x=0X9587C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X95890);
	OpDecimal	(x,	1);
	MakeCode	(x=0X958A4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X958B0);
	OpDecimal	(x,	1);
	MakeCode	(0X958D4);
	MakeCode	(0X958E6);
	MakeCode	(0X958F8);
	MakeCode	(x=0X95916);
	OpHex		(x,	1);
	MakeCode	(x=0X95924);
	OpHex		(x,	1);
	MakeCode	(0X9597C);
	MakeCode	(0X95A1A);
	MakeCode	(0X95A2A);
	MakeCode	(0X95A94);
	MakeCode	(x=0X95AB2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X95AB4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X95AB6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X95AC2);
	OpHex		(x,	1);
	MakeCode	(0X95AEC);
	MakeCode	(x=0X95AF6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X95AF8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X95AFA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X95B08);
	OpHex		(x,	1);
	MakeCode	(0X95B12);
	MakeCode	(0X95B40);
	MakeCode	(0X95B46);
	MakeCode	(0X95B5A);
	MakeCode	(0X95B60);
	MakeCode	(0X95BA2);
	MakeCode	(0X95BA4);
	MakeCode	(0X95C0A);
	MakeCode	(0X95C0C);
	MakeCode	(0X95C2E);
	MakeCode	(0X95C38);
	MakeCode	(0X95C42);
	MakeCode	(0X95C66);
	MakeCode	(0X95C70);
	MakeCode	(0X95C7C);
	MakeCode	(0X95CB0);
	MakeCode	(x=0X95CB4);
	OpDecimal	(x,	1);
	MakeCode	(0X95CD2);
	MakeCode	(0X95CEA);
	MakeWord	(0XAFFFA);
	MakeWord	(0XAFFFC);
	MakeWord	(0XAFFFE);
	MakeWord	(0XB0000);
	MakeByte	(0XB001C);
	MakeWord	(0XB7FFE);
	MakeWord	(0XB8000);
	MakeByte	(0XB8002);
	MakeByte	(0XB8004);
	MakeByte	(0XB8341);
	MakeWord	(0XBFFFE);
	MakeWord	(0XC0000);
	MakeWord	(0XCFFFE);
}

static Functions_0(void) {

	MakeFunction    (0X0,0X520);
	SetFunctionFlags(0X0,0x401);
	MakeNameEx(0X1983E, "AD_ConvComplIntr", SN_LOCAL);
	MakeNameEx(0X2710A, "T1IR_INT", SN_LOCAL);
	MakeFunction    (0X522,0X528);
	SetFunctionFlags(0X522,0x402);
	MakeFunction    (0X528,0X59A);
	SetFunctionFlags(0X528,0x400);
	MakeFunction    (0X59A,0X5AA);
	SetFunctionFlags(0X59A,0x400);
	MakeFunction    (0X5AA,0X5D2);
	SetFunctionFlags(0X5AA,0x402);
	MakeFunction    (0X5D4,0X6DA);
	SetFunctionFlags(0X5D4,0x401);
	MakeFunction    (0X6E2,0X6E6);
	SetFunctionFlags(0X6E2,0x4c3);
	MakeFunction    (0X754,0X822);
	SetFunctionFlags(0X754,0x400);
	MakeFunction    (0X938,0X9FA);
	SetFunctionFlags(0X938,0x400);
	MakeFunction    (0X9FA,0XAD0);
	SetFunctionFlags(0X9FA,0x400);
	MakeFunction    (0XAD0,0XB30);
	SetFunctionFlags(0XAD0,0x400);
	MakeFunction    (0XB84,0XC72);
	SetFunctionFlags(0XB84,0x400);
	MakeFunction    (0XC72,0XC76);
	SetFunctionFlags(0XC72,0x402);
	MakeFunction    (0XC76,0XC82);
	SetFunctionFlags(0XC76,0x402);
	MakeFunction    (0XC84,0XC8A);
	SetFunctionFlags(0XC84,0x402);
	MakeFunction    (0XC98,0XCA2);
	SetFunctionFlags(0XC98,0x402);
	MakeFunction    (0XCA2,0XCAE);
	SetFunctionFlags(0XCA2,0x402);
	MakeFunction    (0X18034,0X180AA);
	SetFunctionFlags(0X18034,0x401);
	MakeFunction    (0X180B6,0X18192);
	SetFunctionFlags(0X180B6,0x400);
	MakeFunction    (0X18192,0X18220);
	SetFunctionFlags(0X18192,0x400);
	MakeFunction    (0X18220,0X18378);
	SetFunctionFlags(0X18220,0x400);
	MakeFunction    (0X18378,0X18512);
	SetFunctionFlags(0X18378,0x400);
	MakeFunction    (0X18512,0X1856C);
	SetFunctionFlags(0X18512,0x400);
	MakeFunction    (0X1856C,0X1858C);
	SetFunctionFlags(0X1856C,0x400);
	MakeFunction    (0X18676,0X18680);
	SetFunctionFlags(0X18676,0x402);
	MakeFunction    (0X18BB4,0X18BFC);
	SetFunctionFlags(0X18BB4,0x400);
	MakeFunction    (0X18C76,0X18C7C);
	SetFunctionFlags(0X18C76,0x402);
	MakeFunction    (0X18C92,0X18CCA);
	SetFunctionFlags(0X18C92,0x402);
	MakeFunction    (0X19064,0X190A0);
	SetFunctionFlags(0X19064,0x402);
	MakeFunction    (0X197B8,0X197F4);
	SetFunctionFlags(0X197B8,0x402);
	MakeFunction    (0X1C6C4,0X1C6DA);
	SetFunctionFlags(0X1C6C4,0x402);
	MakeFunction    (0X1C6DA,0X1C6EE);
	SetFunctionFlags(0X1C6DA,0x403);
	MakeFunction    (0X1DD56,0X1E33E);
	SetFunctionFlags(0X1DD56,0x403);
	MakeFunction    (0X2004E,0X20098);
	SetFunctionFlags(0X2004E,0x402);
	MakeFunction    (0X24322,0X24352);
	SetFunctionFlags(0X24322,0x402);
	MakeFunction    (0X943A8,0X943DC);
	SetFunctionFlags(0X943A8,0x402);
	MakeFunction    (0X943DC,0X9443E);
	SetFunctionFlags(0X943DC,0x402);
	MakeFunction    (0X9505E,0X950D2);
	SetFunctionFlags(0X9505E,0x402);
	MakeFunction    (0X950D2,0X95122);
	SetFunctionFlags(0X950D2,0x402);
	MakeFunction    (0X95122,0X951A4);
	SetFunctionFlags(0X95122,0x402);
	MakeFunction    (0X951A4,0X951AA);
	SetFunctionFlags(0X951A4,0x402);
	MakeFunction    (0X951B2,0X95226);
	SetFunctionFlags(0X951B2,0x402);
	MakeFunction    (0X95230,0X952C0);
	SetFunctionFlags(0X95230,0x402);
	MakeFunction    (0X952C0,0X9530A);
	SetFunctionFlags(0X952C0,0x402);
	MakeFunction    (0X95310,0X955B0);
	SetFunctionFlags(0X95310,0x402);
	MakeFunction    (0X955B0,0X955F4);
	SetFunctionFlags(0X955B0,0x401);
	MakeFunction    (0X957B0,0X9580A);
	SetFunctionFlags(0X957B0,0x402);
	MakeFunction    (0X9580A,0X958F8);
	SetFunctionFlags(0X9580A,0x402);
	MakeFunction    (0X958F8,0X95990);
	SetFunctionFlags(0X958F8,0x402);
	MakeFunction    (0X95A1A,0X95BA4);
	SetFunctionFlags(0X95A1A,0x402);
	MakeFunction    (0X95BA4,0X95C0C);
	SetFunctionFlags(0X95BA4,0x402);
	MakeFunction    (0X95C0C,0X95C42);
	SetFunctionFlags(0X95C0C,0x402);
	MakeFunction    (0X95C42,0X95C7C);
	SetFunctionFlags(0X95C42,0x402);
	MakeFunction    (0X95C7C,0X95CF4);
	SetFunctionFlags(0X95C7C,0x402);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	SetRegEx(0X0,"dpp0",0X0,3);
	SetRegEx(0X0,"dpp1",0X1,3);
	SetRegEx(0X0,"dpp2",0X2,3);
	SetRegEx(0X0,"dpp3",0X3,3);
	SetRegEx(0X25C,"dpp0",0X2E,3);
	SetRegEx(0X260,"dpp1",0X2F,3);
	SetRegEx(0X264,"dpp2",0X3C,3);
	SetRegEx(0X268,"dpp3",0X3,3);
	SetRegEx(0X394,"dpp2",0X2,3);
	SetRegEx(0X3CE,"dpp2",0X2,3);
	SetRegEx(0X3F6,"dpp0",0X2E,3);
	SetRegEx(0X3FA,"dpp1",0X2F,3);
	SetRegEx(0X3FE,"dpp2",0X3C,3);
	SetRegEx(0X402,"dpp3",0X3,3);
	SetRegEx(0X10000,"dpp0",0X0,3);
	SetRegEx(0X10000,"dpp1",0X1,3);
	SetRegEx(0X10000,"dpp2",0X2,3);
	SetRegEx(0X10000,"dpp3",0X3,3);
	SetRegEx(0X180CC,"dpp0",0X0,3);
	SetRegEx(0X180D8,"dpp2",0X2,3);
	SetRegEx(0X18484,"dpp0",0X0,3);
	SetRegEx(0X184A6,"dpp2",0X2,3);
	SetRegEx(0X18CAC,"dpp2",0X2,3);
	SetRegEx(0X18CB0,"dpp0",0X0,3);
	SetRegEx(0X18CBE,"dpp2",0X2,3);
	SetRegEx(0X18CC2,"dpp0",0X0,3);
	SetRegEx(0X19850,"dpp0",0X2E,3);
	SetRegEx(0X19856,"dpp2",0X3C,3);
	SetRegEx(0X198CC,"dpp2",0X2,3);
	SetRegEx(0X198CE,"dpp0",0X0,3);
	SetRegEx(0X1DFF0,"dpp0",0X2E,3);
	SetRegEx(0X1DFF4,"dpp1",0X2F,3);
	SetRegEx(0X1DFF8,"dpp2",0X3C,3);
	SetRegEx(0X1E000,"dpp0",0X2F,3);
	SetRegEx(0X1E024,"dpp1",0X1,3);
	SetRegEx(0X1E038,"dpp2",0X2,3);
	SetRegEx(0X1E058,"dpp1",0X1,3);
	SetRegEx(0X1E066,"dpp2",0X2,3);
	SetRegEx(0X1E06C,"dpp1",0X2F,3);
	SetRegEx(0X1E070,"dpp2",0X3C,3);
	SetRegEx(0X1E07C,"dpp1",0X1,3);
	SetRegEx(0X1E088,"dpp2",0X2,3);
	SetRegEx(0X1E0A0,"dpp1",0X1,3);
	SetRegEx(0X1E0A6,"dpp1",0X2F,3);
	SetRegEx(0X1E0AA,"dpp2",0X3C,3);
	SetRegEx(0X1E0B6,"dpp0",0X2E,3);
	SetRegEx(0X1E0CA,"dpp0",0X2E,3);
	SetRegEx(0X20000,"dpp0",0X0,3);
	SetRegEx(0X20000,"dpp1",0X1,3);
	SetRegEx(0X20000,"dpp2",0X2,3);
	SetRegEx(0X20000,"dpp3",0X3,3);
	SetRegEx(0X30000,"dpp0",0X0,3);
	SetRegEx(0X30000,"dpp1",0X1,3);
	SetRegEx(0X30000,"dpp2",0X2,3);
	SetRegEx(0X30000,"dpp3",0X3,3);
	SetRegEx(0X40000,"dpp0",0X0,3);
	SetRegEx(0X40000,"dpp1",0X1,3);
	SetRegEx(0X40000,"dpp2",0X2,3);
	SetRegEx(0X40000,"dpp3",0X3,3);
	SetRegEx(0X50000,"dpp0",0X0,3);
	SetRegEx(0X50000,"dpp1",0X1,3);
	SetRegEx(0X50000,"dpp2",0X2,3);
	SetRegEx(0X50000,"dpp3",0X3,3);
	SetRegEx(0X60000,"dpp0",0X0,3);
	SetRegEx(0X60000,"dpp1",0X1,3);
	SetRegEx(0X60000,"dpp2",0X2,3);
	SetRegEx(0X60000,"dpp3",0X3,3);
	SetRegEx(0X70000,"dpp0",0X0,3);
	SetRegEx(0X70000,"dpp1",0X1,3);
	SetRegEx(0X70000,"dpp2",0X2,3);
	SetRegEx(0X70000,"dpp3",0X3,3);
	SetRegEx(0X80000,"dpp0",0X0,3);
	SetRegEx(0X80000,"dpp1",0X1,3);
	SetRegEx(0X80000,"dpp2",0X2,3);
	SetRegEx(0X80000,"dpp3",0X3,3);
	SetRegEx(0X90000,"dpp0",0X0,3);
	SetRegEx(0X90000,"dpp1",0X1,3);
	SetRegEx(0X90000,"dpp2",0X2,3);
	SetRegEx(0X90000,"dpp3",0X3,3);
	SetRegEx(0X951F0,"dpp2",0X2,3);
	SetRegEx(0X95218,"dpp0",0X2E,3);
	SetRegEx(0X9521C,"dpp1",0X2F,3);
	SetRegEx(0X95220,"dpp2",0X3C,3);
	SetRegEx(0X95224,"dpp3",0X3,3);
	SetRegEx(0X957DC,"dpp0",0X0,3);
	SetRegEx(0X957EE,"dpp0",0X0,3);
	SetRegEx(0X95B22,"dpp0",0X0,3);
	SetRegEx(0X95B6E,"dpp0",0X0,3);
	SetRegEx(0XA0000,"dpp0",0X0,3);
	SetRegEx(0XA0000,"dpp1",0X1,3);
	SetRegEx(0XA0000,"dpp2",0X2,3);
	SetRegEx(0XA0000,"dpp3",0X3,3);
	SetRegEx(0XB0000,"dpp0",0X0,3);
	SetRegEx(0XB0000,"dpp1",0X1,3);
	SetRegEx(0XB0000,"dpp2",0X2,3);
	SetRegEx(0XB0000,"dpp3",0X3,3);
	SetRegEx(0XC0000,"dpp0",0X0,3);
	SetRegEx(0XC0000,"dpp1",0X1,3);
	SetRegEx(0XC0000,"dpp2",0X2,3);
	SetRegEx(0XC0000,"dpp3",0X3,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
}

// End of file.
